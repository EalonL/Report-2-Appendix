// MPU6050 //
float RateRoll, RatePitch, RateYaw; // Gyro signals variables
float AccX, AccY, AccZ; // Accelerometer signals variables
float inclineAngle, AnglePitch; // Inclination angle variables
float LoopTimer; // Loop timer variables
double upAngle=0.0; //used to determine the maximum angle of vehicle when going up ramp
int initialTime; //used to determine the time taken for vehicle to travel

// FLAG //
int flagBoost=1;//flag for boost
int obstacleOnce=1; //flag for obstacle avoidance
int spinFlag = 1; //flag for spin 360 degree
int rampFlag = 1; //flag for ramp to avoid the activation of MPU-6050 all the time
int distanceFlag=1;//flag for 10cm travel to travel 10cm only once

// MPU6050 //
void gyro_signals(void);//function to calculate gyro signals

void loop() { // This program will run continuously.
  //MPU//
  gyro_signals();

  if (obstacleOnce==1 || spinFlag==1){ //enters loop if vehicle havent go up ramp and havent 360 turn
    if (flagBoost==1 && obstacleOnce == 1){ //boost for one time only
        speedForward(); //motor forward with increased speed
        delay(300); //delay for 0.3 seconds
        flagBoost=0; //indicates boost is done
    }

    else if (inclineAngle >= -9.0 && inclineAngle <= 9.0 && flagBoost==0 && obstacleOnce == 1){ //normal angle but with increased forward speed
        beforeUpRamp(); //follow line with increased forward speed
    }

    else if (inclineAngle > 9.0 && flagBoost==0 && obstacleOnce == 1){ //incline upward the ramp and lcd.print the maximum angle
        upRamp(); //line following go up ramp with boost speed
        obstacleOnce=0; // indicates already upRamp
        if (inclineAngle > upAngle) upAngle=inclineAngle; //determine upRamp inclination angle
        //Serial.print("angle: ");
        //Serial.println(inclineAngle);
    }

    else if (inclineAngle >= -9.0 && inclineAngle <= 9.0 && flagBoost==0 && obstacleOnce == 0){ //spin 360 on top of the ramp
        //Serial.print("Entered spin loop");
        stop(); //stop the vehicle
        delay(4000); //stop for 4 seconds to indicate vehicle about to spin 360 degree
        spin360(); //spin 360 degree
        delay(2400); //delay for 2.4 seconds to complete 360 degree
        spinFlag=0; //this flag will make the program quit this 'if' loop
    }
      else if (spinFlag==0 && rampFlag ==1){ //after spin 360, forward on normal angle, break out of the loop when ramp inclines down
        //Serial.print("Entered the problem loop");
        boost();//boost for 0.01 seconds
        delay(100); //delay for 0.1 seconds
        downRamp(); //do gown ramp using 'for' loop with predetermined time
        rampFlag=0; //indicates the ramp task have been done
    }


    else if (rampFlag==0 && distanceFlag ==1){ // this loop excuted when vehicle is on inclined downward
        stop();//stop the vehicle
        delay(1000); //stop for 1 seconds to indicate vehicle about to travel 10 cm
        initialCounter = counter; //determine initial counter value
        travel_10cm(initialCounter); // function that uses while loop to travel 10cm using counter variable
        stop();//stop the vehicle
        delay(2000); //stop for 2 seconds according to task
        boost();//boost for 0.01 seconds
        delay(10); //boost for 0.01 seconds
        distanceFlag=0; //this flag indicates the 10cm task is done
    }
  }
  
}

void setup() {                   // This program will only run once.
    //MPU6050
    pinMode(13, OUTPUT); //
    digitalWrite(13, HIGH);
    Wire.setClock(400000);
    Wire.begin();
    delay(250);
    Wire.beginTransmission(0x68);
    Wire.write(0x6B);
    Wire.write(0x00);
    Wire.endTransmission();
}

void gyro_signals(void) {
  // Request acceleration data
  Wire.beginTransmission(0x68);
  Wire.write(0x3B);
  Wire.endTransmission();
  Wire.requestFrom(0x68, 6);

  // Read acceleration data
  int16_t AccXLSB = Wire.read() << 8 | Wire.read();
  int16_t AccYLSB = Wire.read() << 8 | Wire.read();
  int16_t AccZLSB = Wire.read() << 8 | Wire.read();

  // Convert raw values to float
  AccX = (float)AccXLSB / 4096;//
  AccY = (float)AccYLSB / 4096;
  AccZ = (float)AccZLSB / 4096;

  // Calculate inclineAngle
  inclineAngle = atan(AccY / sqrt(AccX * AccX + AccZ * AccZ)) * 180 / PI;//incline angle is determine using the formula in degree
}

void spin360(){//function for vehicle to spin 360 degree
    digitalWrite(In1, HIGH);//In1 is set as HIGH for the motor to move forward
    digitalWrite(In2, LOW);//In2 is set as LOW for the motor to move forward
    digitalWrite(In3, HIGH);//In3 is set as HIGH for the motor to move backward
    digitalWrite(In4, LOW);//In4 is set as LOW for the motor to move backward
    analogWrite(EnA, 255);//Right motor with full PWM value of 255
    analogWrite(EnB, 0);//Left motor with PWM value of 0
}

void lcd_print_Angle(){//function to print angle on LCD
    lcd.setCursor(0, 0);//set cursor to first row
    lcd.print("Angle:");//print "Angle:"
    lcd.print(upAngle);//print angle in degree
    lcd.print(" deg");//print "deg" as degree unit
}

void travel_10cm(int initialCounter){//function for vehicle to travel 10cm
    boost(); //boost 0.006 seconds 
    delay(6);//delay for 0.006 seconds
    while (counter < (initialCounter + 50)){//while loop to allow vehicle to move forward for 10cm
        //Serial.print("distance inside loop");
        //Serial.println(distance);
        
        if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up when detect both black line
            //Stop both motors
            stop();
	    digitalWrite(buzzerPin,LOW);//buzzer is not emitting sound when both IR sensor is on black line
	    delay(50);//delay for 0.05 seconds
        }

        else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line 
            //Move both motors
            forward();
	    digitalWrite(buzzerPin,LOW);//buzzer is not emitting sound when both IR sensor is on white line
	    delay(50);//delay for 0.05 seconds
        }

        else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){//Left IR1 sensor not on black line but right IR2 sensor on black line
            //Towards Right by allowing right wheels to move backward while left wheels move forward
            turnRight();
	    digitalWrite(buzzerPin,HIGH);//buzzer is emitting sound when right IR sensor is on black line
            delay(50);//delay for 0.05 seconds
        }

        else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){
            //Towards Left by allowing left wheels to move backward while right wheels move forward
            turnLeft();
	    digitalWrite(buzzerPin,HIGH);//buzzer is emitting sound when left IR sensor is on black line
            delay(50);//delay for 0.05 seconds
        }
        lcd_print_Distance_Time(initialTime);//lcd prints distance and time travelled
    }
}

void downRamp(){ //function to follow line after going down ramp
    for (int t=0; t <= 2300; t++){ //for loop to allow vehicle to move forward for 2.3 seconds
        if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up on the ramp even both IR sensor is on white line therefore, forward() function is called for vehicle to continue moving forward
            //move both motors
            forward();
	    digitalWrite(buzzerPin,LOW);//buzzer is not emitting sound 
	    delay(50);//delay for 0.05 seconds
        }
        else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line
            forward();
	    digitalWrite(buzzerPin,LOW);//buzzer is not emitting sound 
	    delay(50);//delay for 0.05 seconds
        }
  
        else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){ //Left IR1 sensor not on black line but right IR2 sensor on black line
            //Towards Right by allowing right wheels to move backward while left wheels move forward
            rampTurnRight();
	    digitalWrite(buzzerPin,HIGH);//buzzer is emitting sound when right IR sensor is on black line
            delay(50);//delay for 0.05 seconds
        }

        else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){ //Right IR2 sensor not on black line but left IR1 sensor on black line
            //Towards Left by allowing left wheels to move backward while right wheels move forward
            rampTurnLeft();
	    digitalWrite(buzzerPin,HIGH);//buzzer is emitting sound when left IR sensor is on black line
            delay(50);//delay for 0.05 seconds
        }
        delay(1);
    }
}
